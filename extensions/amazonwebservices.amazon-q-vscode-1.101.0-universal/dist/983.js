"use strict";exports.id=983,exports.ids=[983],exports.modules={98983:(B,J,a)=>{a.d(J,{fromSSO:()=>Y});var n=a(80952),w=a(16950);const P=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string");var R=a(81228);const U=5*60*1e3,I="To refresh this SSO session run 'aws sso login' with the corresponding profile.",F=async(e,o={})=>{const{SSOOIDCClient:s}=await a.e(279).then(a.bind(a,85279));return new s(Object.assign({},o.clientConfig??{},{region:e??o.clientConfig?.region,logger:o.clientConfig?.logger??o.parentClientConfig?.logger}))},j=async(e,o,s={})=>{const{CreateTokenCommand:c}=await a.e(279).then(a.bind(a,85279));return(await F(o,s)).send(new c({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},A=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new n.Jh(`Token is expired. ${I}`,!1)},p=(e,o,s=!1)=>{if(typeof o>"u")throw new n.Jh(`Value not present for '${e}' in SSO Token${s?". Cannot refresh":""}. ${I}`,!1)};var G=a(79896);const{writeFile:K}=G.promises,M=(e,o)=>{const s=(0,w.C9)(e),c=JSON.stringify(o,null,2);return K(s,c)},D=new Date(0),z=(e={})=>async({callerClientConfig:o}={})=>{const s={...e,parentClientConfig:{...o,...e.parentClientConfig}};s.logger?.debug("@aws-sdk/token-providers - fromSso");const c=await(0,w.YU)(s),t=(0,w.Bz)({profile:s.profile??o?.profile}),d=c[t];if(d){if(!d.sso_session)throw new n.Jh(`Profile '${t}' is missing required property 'sso_session'.`)}else throw new n.Jh(`Profile '${t}' could not be found in shared credentials file.`,!1);const g=d.sso_session,f=(await(0,w.qw)(s))[g];if(!f)throw new n.Jh(`Sso session '${g}' could not be found in shared credentials file.`,!1);for(const r of["sso_start_url","sso_region"])if(!f[r])throw new n.Jh(`Sso session '${g}' is missing required property '${r}'.`,!1);const u=f.sso_start_url,i=f.sso_region;let l;try{l=await(0,w.vf)(g)}catch{throw new n.Jh(`The SSO session token associated with profile=${t} was not found or is invalid. ${I}`,!1)}p("accessToken",l.accessToken),p("expiresAt",l.expiresAt);const{accessToken:O,expiresAt:k}=l,S={token:O,expiration:new Date(k)};if(S.expiration.getTime()-Date.now()>U)return S;if(Date.now()-D.getTime()<30*1e3)return A(S),S;p("clientId",l.clientId,!0),p("clientSecret",l.clientSecret,!0),p("refreshToken",l.refreshToken,!0);try{D.setTime(Date.now());const r=await j(l,i,s);p("accessToken",r.accessToken),p("expiresIn",r.expiresIn);const T=new Date(Date.now()+r.expiresIn*1e3);try{await M(g,{...l,accessToken:r.accessToken,expiresAt:T.toISOString(),refreshToken:r.refreshToken})}catch{}return{token:r.accessToken,expiration:T}}catch{return A(S),S}},m=!1,$=async({ssoStartUrl:e,ssoSession:o,ssoAccountId:s,ssoRegion:c,ssoRoleName:t,ssoClient:d,clientConfig:g,parentClientConfig:y,profile:f,logger:u})=>{let i;const l="To refresh this SSO session run aws sso login with the corresponding profile.";if(o)try{const C=await z({profile:f})();i={accessToken:C.token,expiresAt:new Date(C.expiration).toISOString()}}catch(C){throw new n.C1(C.message,{tryNextLink:m,logger:u})}else try{i=await(0,w.vf)(e)}catch{throw new n.C1(`The SSO session associated with this profile is invalid. ${l}`,{tryNextLink:m,logger:u})}if(new Date(i.expiresAt).getTime()-Date.now()<=0)throw new n.C1(`The SSO session associated with this profile has expired. ${l}`,{tryNextLink:m,logger:u});const{accessToken:O}=i,{SSOClient:k,GetRoleCredentialsCommand:S}=await a.e(171).then(a.bind(a,74171)),r=d||new k(Object.assign({},g??{},{logger:g?.logger??y?.logger,region:g?.region??c}));let T;try{T=await r.send(new S({accountId:s,roleName:t,accessToken:O}))}catch(C){throw new n.C1(C,{tryNextLink:m,logger:u})}const{roleCredentials:{accessKeyId:h,secretAccessKey:x,sessionToken:v,expiration:E,credentialScope:L,accountId:_}={}}=T;if(!h||!x||!v||!E)throw new n.C1("SSO returns an invalid temporary credential.",{tryNextLink:m,logger:u});const N={accessKeyId:h,secretAccessKey:x,sessionToken:v,expiration:new Date(E),...L&&{credentialScope:L},..._&&{accountId:_}};return o?(0,R.g)(N,"CREDENTIALS_SSO","s"):(0,R.g)(N,"CREDENTIALS_SSO_LEGACY","u"),N},H=(e,o)=>{const{sso_start_url:s,sso_account_id:c,sso_region:t,sso_role_name:d}=e;if(!s||!c||!t||!d)throw new n.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:o});return e},Y=(e={})=>async({callerClientConfig:o}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:s,ssoAccountId:c,ssoRegion:t,ssoRoleName:d,ssoSession:g}=e,{ssoClient:y}=e,f=(0,w.Bz)({profile:e.profile??o?.profile});if(!s&&!c&&!t&&!d&&!g){const i=(await(0,w.YU)(e))[f];if(!i)throw new n.C1(`Profile ${f} was not found.`,{logger:e.logger});if(!P(i))throw new n.C1(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(i?.sso_session){const h=(await(0,w.qw)(e))[i.sso_session],x=` configurations in profile ${f} and sso-session ${i.sso_session}`;if(t&&t!==h.sso_region)throw new n.C1("Conflicting SSO region"+x,{tryNextLink:!1,logger:e.logger});if(s&&s!==h.sso_start_url)throw new n.C1("Conflicting SSO start_url"+x,{tryNextLink:!1,logger:e.logger});i.sso_region=h.sso_region,i.sso_start_url=h.sso_start_url}const{sso_start_url:l,sso_account_id:O,sso_region:k,sso_role_name:S,sso_session:r}=H(i,e.logger);return $({ssoStartUrl:l,ssoSession:r,ssoAccountId:O,ssoRegion:k,ssoRoleName:S,ssoClient:y,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f})}else{if(!s||!c||!t||!d)throw new n.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});return $({ssoStartUrl:s,ssoSession:g,ssoAccountId:c,ssoRegion:t,ssoRoleName:d,ssoClient:y,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f})}}}};
