"use strict";exports.id=251,exports.ids=[251],exports.modules={11251:(S,l,n)=>{n.r(l),n.d(l,{fromProcess:()=>y});var u=n(39084),i=n(16506),f=n(35317),p=n(39023),x=n(15238);const P=(r,e,s)=>{if(e.Version!==1)throw Error(`Profile ${r} credential_process did not return Version 1.`);if(e.AccessKeyId===void 0||e.SecretAccessKey===void 0)throw Error(`Profile ${r} credential_process returned invalid credentials.`);if(e.Expiration){const d=new Date;if(new Date(e.Expiration)<d)throw Error(`Profile ${r} credential_process returned expired credentials.`)}let o=e.AccountId;!o&&s?.[r]?.aws_account_id&&(o=s[r].aws_account_id);const t={accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,...e.SessionToken&&{sessionToken:e.SessionToken},...e.Expiration&&{expiration:new Date(e.Expiration)},...e.CredentialScope&&{credentialScope:e.CredentialScope},...o&&{accountId:o}};return(0,x.g)(t,"CREDENTIALS_PROCESS","w"),t},w=async(r,e,s)=>{const o=e[r];if(e[r]){const t=o.credential_process;if(t!==void 0){const d=(0,p.promisify)(f.exec);try{const{stdout:c}=await d(t);let a;try{a=JSON.parse(c.trim())}catch{throw Error(`Profile ${r} credential_process returned invalid JSON.`)}return P(r,a,e)}catch(c){throw new i.C1(c.message,{logger:s})}}else throw new i.C1(`Profile ${r} did not contain credential_process.`,{logger:s})}else throw new i.C1(`Profile ${r} could not be found in shared credentials file.`,{logger:s})},y=(r={})=>async({callerClientConfig:e}={})=>{r.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");const s=await(0,u.YU)(r);return w((0,u.Bz)({profile:r.profile??e?.profile}),s,r.logger)}}};
