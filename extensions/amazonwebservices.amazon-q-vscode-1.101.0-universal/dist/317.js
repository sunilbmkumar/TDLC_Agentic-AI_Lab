"use strict";exports.id=317,exports.ids=[317],exports.modules={9317:(b,P,o)=>{o.d(P,{fromIni:()=>T});var f=o(70619),l=o(3631),d=o(91316);const S=(e,t,n)=>{const r={EcsContainer:async i=>{const{fromHttp:s}=await o.e(986).then(o.bind(o,8986)),{fromContainerMetadata:a}=await Promise.resolve().then(o.bind(o,40728));return n?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,l.cy)(s(i??{}),a(i))().then(u)},Ec2InstanceMetadata:async i=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:s}=await Promise.resolve().then(o.bind(o,40728));return async()=>s(i)().then(u)},Environment:async i=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:s}=await Promise.resolve().then(o.bind(o,97215));return async()=>s(i)().then(u)}};if(e in r)return r[e];throw new l.C1(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:n})},u=e=>(0,d.g)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),m=(e,{profile:t="default",logger:n}={})=>Boolean(e)&&typeof e=="object"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(I(e,{profile:t,logger:n})||R(e,{profile:t,logger:n})),I=(e,{profile:t,logger:n})=>{const r=typeof e.source_profile=="string"&&typeof e.credential_source>"u";return r&&n?.debug?.(`    ${t} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),r},R=(e,{profile:t,logger:n})=>{const r=typeof e.credential_source=="string"&&typeof e.source_profile>"u";return r&&n?.debug?.(`    ${t} isCredentialSourceProfile credential_source=${e.credential_source}`),r},h=async(e,t,n,r={})=>{n.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const i=t[e];if(!n.roleAssumer){const{getDefaultRoleAssumer:c}=await o.e(27).then(o.bind(o,75408));n.roleAssumer=c({...n.clientConfig,credentialProviderLogger:n.logger,parentClientConfig:n?.parentClientConfig},n.clientPlugins)}const{source_profile:s}=i;if(s&&s in r)throw new l.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,f.Bz)(n)}. Profiles visited: `+Object.keys(r).join(", "),{logger:n.logger});n.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${s?`source_profile=[${s}]`:`profile=[${e}]`}`);const a=s?v(s,t,n,{...r,[s]:!0},g(t[s]??{})):(await S(i.credential_source,e,n.logger)(n))();if(g(i))return a.then(c=>(0,d.g)(c,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{const c={RoleArn:i.role_arn,RoleSessionName:i.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:i.external_id,DurationSeconds:parseInt(i.duration_seconds||"3600",10)},{mfa_serial:y}=i;if(y){if(!n.mfaCodeProvider)throw new l.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:n.logger,tryNextLink:!1});c.SerialNumber=y,c.TokenCode=await n.mfaCodeProvider(y)}const F=await a;return n.roleAssumer(F,c).then($=>(0,d.g)($,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},g=e=>!e.role_arn&&!!e.credential_source,A=e=>Boolean(e)&&typeof e=="object"&&typeof e.credential_process=="string",O=async(e,t)=>Promise.resolve().then(o.bind(o,27084)).then(({fromProcess:n})=>n({...e,profile:t})().then(r=>(0,d.g)(r,"CREDENTIALS_PROFILE_PROCESS","v"))),w=async(e,t,n={})=>{const{fromSSO:r}=await o.e(319).then(o.bind(o,14319));return r({profile:e,logger:n.logger})().then(i=>t.sso_session?(0,d.g)(i,"CREDENTIALS_PROFILE_SSO","r"):(0,d.g)(i,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},L=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string"),C=e=>Boolean(e)&&typeof e=="object"&&typeof e.aws_access_key_id=="string"&&typeof e.aws_secret_access_key=="string"&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,E=async(e,t)=>{t?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const n={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,d.g)(n,"CREDENTIALS_PROFILE","n")},D=e=>Boolean(e)&&typeof e=="object"&&typeof e.web_identity_token_file=="string"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,x=async(e,t)=>o.e(739).then(o.bind(o,63739)).then(({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity,logger:t.logger,parentClientConfig:t.parentClientConfig})().then(r=>(0,d.g)(r,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),v=async(e,t,n,r={},i=!1)=>{const s=t[e];if(Object.keys(r).length>0&&C(s))return E(s,n);if(i||m(s,{profile:e,logger:n.logger}))return h(e,t,n,r);if(C(s))return E(s,n);if(D(s))return x(s,n);if(A(s))return O(n,e);if(L(s))return await w(e,s,n);throw new l.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},T=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const t=await(0,f.YU)(e);return v((0,f.Bz)(e),t,e)}}};
