"use strict";exports.id=547,exports.ids=[547],exports.modules={78547:(W,d,o)=>{o.r(d),o.d(d,{fromTokenFile:()=>T,fromWebToken:()=>i});var a=o(81228),g=o(80952),E=o(79896);const i=e=>async n=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");const{roleArn:s,roleSessionName:r,webIdentityToken:t,providerId:f,policyArns:y,policy:A,durationSeconds:I}=e;let{roleAssumerWithWebIdentity:l}=e;if(!l){const{getDefaultRoleAssumerWithWebIdentity:m}=await o.e(734).then(o.bind(o,52734));l=m({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:{...n?.callerClientConfig,...e.parentClientConfig}},e.clientPlugins)}return l({RoleArn:s,RoleSessionName:r??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:t,ProviderId:f,PolicyArns:y,Policy:A,DurationSeconds:I})},c="AWS_WEB_IDENTITY_TOKEN_FILE",S="AWS_ROLE_ARN",N="AWS_ROLE_SESSION_NAME",T=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");const n=e?.webIdentityTokenFile??process.env[c],s=e?.roleArn??process.env[S],r=e?.roleSessionName??process.env[N];if(!n||!s)throw new g.C1("Web identity configuration not specified",{logger:e.logger});const t=await i({...e,webIdentityToken:(0,E.readFileSync)(n,{encoding:"ascii"}),roleArn:s,roleSessionName:r})();return n===process.env[c]&&(0,a.g)(t,"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN","h"),t}}};
