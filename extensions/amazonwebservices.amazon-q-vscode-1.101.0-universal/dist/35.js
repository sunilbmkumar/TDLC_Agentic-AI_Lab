"use strict";exports.id=35,exports.ids=[35,416],exports.modules={45035:($,D,f)=>{f.d(D,{fromContainerMetadata:()=>R,fromInstanceMetadata:()=>ie,getInstanceMetadataEndpoint:()=>W,httpRequest:()=>E});var r=f(16506),T=f(87016),p=f(20181),l=f(58611);function E(e){return new Promise((t,a)=>{const n=(0,l.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});n.on("error",o=>{a(Object.assign(new r.mZ("Unable to connect to instance metadata service"),o)),n.destroy()}),n.on("timeout",()=>{a(new r.mZ("TimeoutError from instance metadata service")),n.destroy()}),n.on("response",o=>{const{statusCode:m=400}=o;(m<200||300<=m)&&(a(Object.assign(new r.mZ("Error response received from instance metadata service"),{statusCode:m})),n.destroy());const N=[];o.on("data",_=>{N.push(_)}),o.on("end",()=>{t(p.Buffer.concat(N)),n.destroy()})}),n.end()})}const i=e=>Boolean(e)&&typeof e=="object"&&typeof e.AccessKeyId=="string"&&typeof e.SecretAccessKey=="string"&&typeof e.Token=="string"&&typeof e.Expiration=="string",u=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration),...e.AccountId&&{accountId:e.AccountId}}),S=1e3,s=0,c=({maxRetries:e=s,timeout:t=S})=>({maxRetries:e,timeout:t}),d=(e,t)=>{let a=e();for(let n=0;n<t;n++)a=a.catch(e);return a},I="AWS_CONTAINER_CREDENTIALS_FULL_URI",v="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",O="AWS_CONTAINER_AUTHORIZATION_TOKEN",R=(e={})=>{const{timeout:t,maxRetries:a}=c(e);return()=>d(async()=>{const n=await j({logger:e.logger}),o=JSON.parse(await P(t,n));if(!i(o))throw new r.C1("Invalid response received from instance metadata service.",{logger:e.logger});return u(o)},a)},P=async(e,t)=>(process.env[O]&&(t.headers={...t.headers,Authorization:process.env[O]}),(await E({...t,timeout:e})).toString()),V="169.254.170.2",F={localhost:!0,"127.0.0.1":!0},b={"http:":!0,"https:":!0},j=async({logger:e})=>{if(process.env[v])return{hostname:V,path:process.env[v]};if(process.env[I]){const t=(0,T.parse)(process.env[I]);if(!t.hostname||!(t.hostname in F))throw new r.C1(`${t.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:e});if(!t.protocol||!(t.protocol in b))throw new r.C1(`${t.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:e});return{...t,port:t.port?parseInt(t.port,10):void 0}}throw new r.C1(`The container metadata credential provider cannot be used unless the ${v} or ${I} environment variable is set`,{tryNextLink:!1,logger:e})};var L=f(75033);class k extends r.C1{constructor(t,a=!0){super(t,a),this.tryNextLink=a,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,k.prototype)}}var H=f(30183),x;(function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"})(x||(x={}));const z="AWS_EC2_METADATA_SERVICE_ENDPOINT",J="ec2_metadata_service_endpoint",X={environmentVariableSelector:e=>e[z],configFileSelector:e=>e[J],default:void 0};var C;(function(e){e.IPv4="IPv4",e.IPv6="IPv6"})(C||(C={}));const Y="AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE",Q="ec2_metadata_service_endpoint_mode",q={environmentVariableSelector:e=>e[Y],configFileSelector:e=>e[Q],default:C.IPv4},W=async()=>(0,H.D)(await ee()||await te()),ee=async()=>(0,L.Z)(X)(),te=async()=>{const e=await(0,L.Z)(q)();switch(e){case C.IPv4:return x.IPv4;case C.IPv6:return x.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(C)}`)}},ne=5*60,oe=5*60,ae="https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html",K=(e,t)=>{const a=ne+Math.floor(Math.random()*oe),n=new Date(Date.now()+a*1e3);t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(n)}.
For more information, please visit: `+ae);const o=e.originalExpiration??e.expiration;return{...e,...o?{originalExpiration:o}:{},expiration:n}},se=(e,t={})=>{const a=t?.logger||console;let n;return async()=>{let o;try{o=await e(),o.expiration&&o.expiration.getTime()<Date.now()&&(o=K(o,a))}catch(m){if(n)a.warn("Credential renew failed: ",m),o=K(n,a);else throw m}return n=o,o}},B="/latest/meta-data/iam/security-credentials/",re="/latest/api/token",U="AWS_EC2_METADATA_V1_DISABLED",G="ec2_metadata_v1_disabled",Z="x-aws-ec2-metadata-token",ie=(e={})=>se(ce(e),{logger:e.logger}),ce=(e={})=>{let t=!1;const{logger:a,profile:n}=e,{timeout:o,maxRetries:m}=c(e),N=async(_,w)=>{if(t||w.headers?.[Z]==null){let g=!1,h=!1;const pe=await(0,L.Z)({environmentVariableSelector:A=>{const y=A[U];if(h=!!y&&y!=="false",y===void 0)throw new r.C1(`${U} not set in env, checking config file next.`,{logger:e.logger});return h},configFileSelector:A=>{const y=A[G];return g=!!y&&y!=="false",g},default:!1},{profile:n})();if(e.ec2MetadataV1Disabled||pe){const A=[];throw e.ec2MetadataV1Disabled&&A.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),g&&A.push(`config file profile (${G})`),h&&A.push(`process environment variable (${U})`),new k(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${A.join(", ")}].`)}}const ue=(await d(async()=>{let g;try{g=await de(w)}catch(h){throw h.statusCode===401&&(t=!1),h}return g},_)).trim();return d(async()=>{let g;try{g=await fe(ue,w,e)}catch(h){throw h.statusCode===401&&(t=!1),h}return g},_)};return async()=>{const _=await W();if(t)return a?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),N(m,{..._,timeout:o});{let w;try{w=(await le({..._,timeout:o})).toString()}catch(M){if(M?.statusCode===400)throw Object.assign(M,{message:"EC2 Metadata token request returned error"});return(M.message==="TimeoutError"||[403,404,405].includes(M.statusCode))&&(t=!0),a?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),N(m,{..._,timeout:o})}return N(m,{..._,headers:{[Z]:w},timeout:o})}}},le=async e=>E({...e,path:re,method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),de=async e=>(await E({...e,path:B})).toString(),fe=async(e,t,a)=>{const n=JSON.parse((await E({...t,path:B+e})).toString());if(!i(n))throw new r.C1("Invalid response received from instance metadata service.",{logger:a.logger});return u(n)}},75033:($,D,f)=>{f.d(D,{Z:()=>S});var r=f(16506);function T(s){try{const c=new Set(Array.from(s.match(/([A-Z_]){3,}/g)??[]));return c.delete("CONFIG"),c.delete("CONFIG_PREFIX_SEPARATOR"),c.delete("ENV"),[...c].join(", ")}catch{return s}}const p=(s,c)=>async()=>{try{const d=s(process.env);if(d===void 0)throw new Error;return d}catch(d){throw new r.C1(d.message||`Not found in ENV: ${T(s.toString())}`,{logger:c})}};var l=f(39084);const E=(s,{preferredFile:c="config",...d}={})=>async()=>{const I=(0,l.Bz)(d),{configFile:v,credentialsFile:O}=await(0,l.p6)(d),R=O[I]||{},P=v[I]||{},V=c==="config"?{...R,...P}:{...P,...R};try{const b=s(V,c==="config"?v:O);if(b===void 0)throw new Error;return b}catch(F){throw new r.C1(F.message||`Not found in config files w/ profile [${I}]: ${T(s.toString())}`,{logger:d.logger})}},i=s=>typeof s=="function",u=s=>i(s)?async()=>await s():(0,r.VR)(s),S=({environmentVariableSelector:s,configFileSelector:c,default:d},I={})=>(0,r.Bj)((0,r.cy)(p(s),E(c,I),u(d)))},30183:($,D,f)=>{f.d(D,{D:()=>T});function r(p){const l={};if(p=p.replace(/^\?/,""),p)for(const E of p.split("&")){let[i,u=null]=E.split("=");i=decodeURIComponent(i),u&&(u=decodeURIComponent(u)),i in l?Array.isArray(l[i])?l[i].push(u):l[i]=[l[i],u]:l[i]=u}return l}const T=p=>{if(typeof p=="string")return T(new URL(p));const{hostname:l,pathname:E,port:i,protocol:u,search:S}=p;let s;return S&&(s=r(S)),{hostname:l,port:i?parseInt(i):void 0,protocol:u,path:E,query:s}}}};
