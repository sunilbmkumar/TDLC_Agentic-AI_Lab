"use strict";exports.id=804,exports.ids=[804],exports.modules={38042:(v,d,s)=>{s.r(d),s.d(d,{fromTokenFile:()=>h,fromWebToken:()=>u});function f(e,t,r){return e.$source||(e.$source={}),e.$source[t]=r,e}class i extends Error{constructor(t,r=!0){let o,n=!0;typeof r=="boolean"?(o=void 0,n=r):r!=null&&typeof r=="object"&&(o=r.logger,n=r.tryNextLink??!0),super(t),this.name="ProviderError",this.tryNextLink=n,Object.setPrototypeOf(this,i.prototype),o?.debug?.(`@smithy/property-provider ${n?"->":"(!)"} ${t}`)}static from(t,r=!0){return Object.assign(new this(t.message,r),t)}}class l extends i{constructor(t,r=!0){super(t,r),this.name="CredentialsProviderError",Object.setPrototypeOf(this,l.prototype)}}class a extends i{constructor(t,r=!0){super(t,r),this.name="TokenProviderError",Object.setPrototypeOf(this,a.prototype)}}const A=(...e)=>async()=>{if(e.length===0)throw new ProviderError("No providers in chain");let t;for(const r of e)try{return await r()}catch(o){if(t=o,o?.tryNextLink)continue;throw o}throw t};var g=s(79896);const u=e=>async t=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");const{roleArn:r,roleSessionName:o,webIdentityToken:n,providerId:p,policyArns:m,policy:S,durationSeconds:T}=e;let{roleAssumerWithWebIdentity:c}=e;if(!c){const{getDefaultRoleAssumerWithWebIdentity:b}=await Promise.all([s.e(824),s.e(161)]).then(s.bind(s,84161));c=b({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:{...t?.callerClientConfig,...e.parentClientConfig}},e.clientPlugins)}return c({RoleArn:r,RoleSessionName:o??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:n,ProviderId:p,PolicyArns:m,Policy:S,DurationSeconds:T})},y="AWS_WEB_IDENTITY_TOKEN_FILE",E="AWS_ROLE_ARN",N="AWS_ROLE_SESSION_NAME",h=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");const t=e?.webIdentityTokenFile??process.env[y],r=e?.roleArn??process.env[E],o=e?.roleSessionName??process.env[N];if(!t||!r)throw new l("Web identity configuration not specified",{logger:e.logger});const n=await u({...e,webIdentityToken:(0,g.readFileSync)(t,{encoding:"ascii"}),roleArn:r,roleSessionName:o})();return t===process.env[y]&&f(n,"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN","h"),n}}};
