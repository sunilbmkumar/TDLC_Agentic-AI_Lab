"use strict";exports.id=416,exports.ids=[416],exports.modules={45035:(ue,x,f)=>{f.d(x,{fromContainerMetadata:()=>W,fromInstanceMetadata:()=>re,getInstanceMetadataEndpoint:()=>M,httpRequest:()=>m});var s=f(16506),F=f(87016),V=f(20181),L=f(58611);function m(e){return new Promise((t,o)=>{const n=(0,L.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});n.on("error",a=>{o(Object.assign(new s.mZ("Unable to connect to instance metadata service"),a)),n.destroy()}),n.on("timeout",()=>{o(new s.mZ("TimeoutError from instance metadata service")),n.destroy()}),n.on("response",a=>{const{statusCode:r=400}=a;(r<200||300<=r)&&(o(Object.assign(new s.mZ("Error response received from instance metadata service"),{statusCode:r})),n.destroy());const u=[];a.on("data",i=>{u.push(i)}),a.on("end",()=>{t(V.Buffer.concat(u)),n.destroy()})}),n.end()})}const C=e=>Boolean(e)&&typeof e=="object"&&typeof e.AccessKeyId=="string"&&typeof e.SecretAccessKey=="string"&&typeof e.Token=="string"&&typeof e.Expiration=="string",D=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration),...e.AccountId&&{accountId:e.AccountId}}),k=1e3,U=0,w=({maxRetries:e=U,timeout:t=k})=>({maxRetries:e,timeout:t}),T=(e,t)=>{let o=e();for(let n=0;n<t;n++)o=o.catch(e);return o},h="AWS_CONTAINER_CREDENTIALS_FULL_URI",S="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",O="AWS_CONTAINER_AUTHORIZATION_TOKEN",W=(e={})=>{const{timeout:t,maxRetries:o}=w(e);return()=>T(async()=>{const n=await H({logger:e.logger}),a=JSON.parse(await K(t,n));if(!C(a))throw new s.C1("Invalid response received from instance metadata service.",{logger:e.logger});return D(a)},o)},K=async(e,t)=>(process.env[O]&&(t.headers={...t.headers,Authorization:process.env[O]}),(await m({...t,timeout:e})).toString()),$="169.254.170.2",B={localhost:!0,"127.0.0.1":!0},G={"http:":!0,"https:":!0},H=async({logger:e})=>{if(process.env[S])return{hostname:$,path:process.env[S]};if(process.env[h]){const t=(0,F.parse)(process.env[h]);if(!t.hostname||!(t.hostname in B))throw new s.C1(`${t.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:e});if(!t.protocol||!(t.protocol in G))throw new s.C1(`${t.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:e});return{...t,port:t.port?parseInt(t.port,10):void 0}}throw new s.C1(`The container metadata credential provider cannot be used unless the ${S} or ${h} environment variable is set`,{tryNextLink:!1,logger:e})};var v=f(75033);class g extends s.C1{constructor(t,o=!0){super(t,o),this.tryNextLink=o,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,g.prototype)}}var Z=f(30183),A;(function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"})(A||(A={}));const j="AWS_EC2_METADATA_SERVICE_ENDPOINT",z="ec2_metadata_service_endpoint",J={environmentVariableSelector:e=>e[j],configFileSelector:e=>e[z],default:void 0};var E;(function(e){e.IPv4="IPv4",e.IPv6="IPv6"})(E||(E={}));const Y="AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE",X="ec2_metadata_service_endpoint_mode",q={environmentVariableSelector:e=>e[Y],configFileSelector:e=>e[X],default:E.IPv4},M=async()=>(0,Z.D)(await Q()||await ee()),Q=async()=>(0,v.Z)(J)(),ee=async()=>{const e=await(0,v.Z)(q)();switch(e){case E.IPv4:return A.IPv4;case E.IPv6:return A.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(E)}`)}},te=5*60,ne=5*60,ae="https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html",y=(e,t)=>{const o=te+Math.floor(Math.random()*ne),n=new Date(Date.now()+o*1e3);t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(n)}.
For more information, please visit: `+ae);const a=e.originalExpiration??e.expiration;return{...e,...a?{originalExpiration:a}:{},expiration:n}},oe=(e,t={})=>{const o=t?.logger||console;let n;return async()=>{let a;try{a=await e(),a.expiration&&a.expiration.getTime()<Date.now()&&(a=y(a,o))}catch(r){if(n)o.warn("Credential renew failed: ",r),a=y(n,o);else throw r}return n=a,a}},P="/latest/meta-data/iam/security-credentials/",se="/latest/api/token",N="AWS_EC2_METADATA_V1_DISABLED",R="ec2_metadata_v1_disabled",b="x-aws-ec2-metadata-token",re=(e={})=>oe(ie(e),{logger:e.logger}),ie=(e={})=>{let t=!1;const{logger:o,profile:n}=e,{timeout:a,maxRetries:r}=w(e),u=async(i,I)=>{if(t||I.headers?.[b]==null){let c=!1,l=!1;const Ee=await(0,v.Z)({environmentVariableSelector:d=>{const p=d[N];if(l=!!p&&p!=="false",p===void 0)throw new s.C1(`${N} not set in env, checking config file next.`,{logger:e.logger});return l},configFileSelector:d=>{const p=d[R];return c=!!p&&p!=="false",c},default:!1},{profile:n})();if(e.ec2MetadataV1Disabled||Ee){const d=[];throw e.ec2MetadataV1Disabled&&d.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),c&&d.push(`config file profile (${R})`),l&&d.push(`process environment variable (${N})`),new g(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${d.join(", ")}].`)}}const fe=(await T(async()=>{let c;try{c=await le(I)}catch(l){throw l.statusCode===401&&(t=!1),l}return c},i)).trim();return T(async()=>{let c;try{c=await de(fe,I,e)}catch(l){throw l.statusCode===401&&(t=!1),l}return c},i)};return async()=>{const i=await M();if(t)return o?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),u(r,{...i,timeout:a});{let I;try{I=(await ce({...i,timeout:a})).toString()}catch(_){if(_?.statusCode===400)throw Object.assign(_,{message:"EC2 Metadata token request returned error"});return(_.message==="TimeoutError"||[403,404,405].includes(_.statusCode))&&(t=!0),o?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),u(r,{...i,timeout:a})}return u(r,{...i,headers:{[b]:I},timeout:a})}}},ce=async e=>m({...e,path:se,method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),le=async e=>(await m({...e,path:P})).toString(),de=async(e,t,o)=>{const n=JSON.parse((await m({...t,path:P+e})).toString());if(!C(n))throw new s.C1("Invalid response received from instance metadata service.",{logger:o.logger});return D(n)}}};
