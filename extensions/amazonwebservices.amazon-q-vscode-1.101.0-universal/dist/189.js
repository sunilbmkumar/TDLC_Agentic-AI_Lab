"use strict";exports.id=189,exports.ids=[189],exports.modules={80189:(b,v,s)=>{s.d(v,{fromIni:()=>F});var a=s(16950),l=s(80952),d=s(81228);const P=(e,t,n)=>{const r={EcsContainer:async i=>{const{fromHttp:o}=await s.e(58).then(s.bind(s,41058)),{fromContainerMetadata:u}=await s.e(745).then(s.bind(s,67745));return n?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,l.cy)(o(i??{}),u(i))().then(f)},Ec2InstanceMetadata:async i=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:o}=await s.e(745).then(s.bind(s,67745));return async()=>o(i)().then(f)},Environment:async i=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:o}=await Promise.resolve().then(s.bind(s,46544));return async()=>o(i)().then(f)}};if(e in r)return r[e];throw new l.C1(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:n})},f=e=>(0,d.g)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),m=(e,{profile:t="default",logger:n}={})=>Boolean(e)&&typeof e=="object"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(R(e,{profile:t,logger:n})||h(e,{profile:t,logger:n})),R=(e,{profile:t,logger:n})=>{const r=typeof e.source_profile=="string"&&typeof e.credential_source>"u";return r&&n?.debug?.(`    ${t} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),r},h=(e,{profile:t,logger:n})=>{const r=typeof e.credential_source=="string"&&typeof e.source_profile>"u";return r&&n?.debug?.(`    ${t} isCredentialSourceProfile credential_source=${e.credential_source}`),r},A=async(e,t,n,r={})=>{n.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const i=t[e],{source_profile:o,region:u}=i;if(!n.roleAssumer){const{getDefaultRoleAssumer:c}=await s.e(734).then(s.bind(s,52734));n.roleAssumer=c({...n.clientConfig,credentialProviderLogger:n.logger,parentClientConfig:{...n?.parentClientConfig,region:u??n?.parentClientConfig?.region}},n.clientPlugins)}if(o&&o in r)throw new l.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,a.Bz)(n)}. Profiles visited: `+Object.keys(r).join(", "),{logger:n.logger});n.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${o?`source_profile=[${o}]`:`profile=[${e}]`}`);const I=o?S(o,t,n,{...r,[o]:!0},C(t[o]??{})):(await P(i.credential_source,e,n.logger)(n))();if(C(i))return I.then(c=>(0,d.g)(c,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{const c={RoleArn:i.role_arn,RoleSessionName:i.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:i.external_id,DurationSeconds:parseInt(i.duration_seconds||"3600",10)},{mfa_serial:g}=i;if(g){if(!n.mfaCodeProvider)throw new l.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:n.logger,tryNextLink:!1});c.SerialNumber=g,c.TokenCode=await n.mfaCodeProvider(g)}const $=await I;return n.roleAssumer($,c).then(W=>(0,d.g)(W,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},C=e=>!e.role_arn&&!!e.credential_source,O=e=>Boolean(e)&&typeof e=="object"&&typeof e.credential_process=="string",L=async(e,t)=>s.e(909).then(s.bind(s,28909)).then(({fromProcess:n})=>n({...e,profile:t})().then(r=>(0,d.g)(r,"CREDENTIALS_PROFILE_PROCESS","v"))),w=async(e,t,n={})=>{const{fromSSO:r}=await s.e(983).then(s.bind(s,98983));return r({profile:e,logger:n.logger,parentClientConfig:n.parentClientConfig,clientConfig:n.clientConfig})().then(i=>t.sso_session?(0,d.g)(i,"CREDENTIALS_PROFILE_SSO","r"):(0,d.g)(i,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},D=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string"),y=e=>Boolean(e)&&typeof e=="object"&&typeof e.aws_access_key_id=="string"&&typeof e.aws_secret_access_key=="string"&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,E=async(e,t)=>{t?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const n={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,d.g)(n,"CREDENTIALS_PROFILE","n")},x=e=>Boolean(e)&&typeof e=="object"&&typeof e.web_identity_token_file=="string"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,T=async(e,t)=>s.e(547).then(s.bind(s,78547)).then(({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity,logger:t.logger,parentClientConfig:t.parentClientConfig})().then(r=>(0,d.g)(r,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),S=async(e,t,n,r={},i=!1)=>{const o=t[e];if(Object.keys(r).length>0&&y(o))return E(o,n);if(i||m(o,{profile:e,logger:n.logger}))return A(e,t,n,r);if(y(o))return E(o,n);if(x(o))return T(o,n);if(O(o))return L(n,e);if(D(o))return await w(e,o,n);throw new l.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},F=(e={})=>async({callerClientConfig:t}={})=>{const n={...e,parentClientConfig:{...t,...e.parentClientConfig}};n.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const r=await(0,a.YU)(n);return S((0,a.Bz)({profile:e.profile??t?.profile}),r,n)}}};
