"use strict";exports.id=833,exports.ids=[833],exports.modules={69833:(W,J,t)=>{t.d(J,{fromSSO:()=>B});var n=t(16506),h=t(39084);const U=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string");var R=t(15238);const F=5*60*1e3,I="To refresh this SSO session run 'aws sso login' with the corresponding profile.",j=async(e,o={})=>{const{SSOOIDCClient:s}=await Promise.all([t.e(824),t.e(352)]).then(t.bind(t,4352));return new s(Object.assign({},o.clientConfig??{},{region:e??o.clientConfig?.region,logger:o.clientConfig?.logger??o.parentClientConfig?.logger}))},G=async(e,o,s={})=>{const{CreateTokenCommand:l}=await Promise.all([t.e(824),t.e(352)]).then(t.bind(t,4352));return(await j(o,s)).send(new l({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},A=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new n.Jh(`Token is expired. ${I}`,!1)},p=(e,o,s=!1)=>{if(typeof o>"u")throw new n.Jh(`Value not present for '${e}' in SSO Token${s?". Cannot refresh":""}. ${I}`,!1)};var K=t(79896);const{writeFile:M}=K.promises,z=(e,o)=>{const s=(0,h.C9)(e),l=JSON.stringify(o,null,2);return M(s,l)},D=new Date(0),H=(e={})=>async({callerClientConfig:o}={})=>{const s={...e,parentClientConfig:{...o,...e.parentClientConfig}};s.logger?.debug("@aws-sdk/token-providers - fromSso");const l=await(0,h.YU)(s),i=(0,h.Bz)({profile:s.profile??o?.profile}),d=l[i];if(d){if(!d.sso_session)throw new n.Jh(`Profile '${i}' is missing required property 'sso_session'.`)}else throw new n.Jh(`Profile '${i}' could not be found in shared credentials file.`,!1);const g=d.sso_session,f=(await(0,h.qw)(s))[g];if(!f)throw new n.Jh(`Sso session '${g}' could not be found in shared credentials file.`,!1);for(const a of["sso_start_url","sso_region"])if(!f[a])throw new n.Jh(`Sso session '${g}' is missing required property '${a}'.`,!1);const C=f.sso_start_url,r=f.sso_region;let c;try{c=await(0,h.vf)(g)}catch{throw new n.Jh(`The SSO session token associated with profile=${i} was not found or is invalid. ${I}`,!1)}p("accessToken",c.accessToken),p("expiresAt",c.expiresAt);const{accessToken:O,expiresAt:x}=c,S={token:O,expiration:new Date(x)};if(S.expiration.getTime()-Date.now()>F)return S;if(Date.now()-D.getTime()<30*1e3)return A(S),S;p("clientId",c.clientId,!0),p("clientSecret",c.clientSecret,!0),p("refreshToken",c.refreshToken,!0);try{D.setTime(Date.now());const a=await G(c,r,s);p("accessToken",a.accessToken),p("expiresIn",a.expiresIn);const m=new Date(Date.now()+a.expiresIn*1e3);try{await z(g,{...c,accessToken:a.accessToken,expiresAt:m.toISOString(),refreshToken:a.refreshToken})}catch{}return{token:a.accessToken,expiration:m}}catch{return A(S),S}},T=!1,$=async({ssoStartUrl:e,ssoSession:o,ssoAccountId:s,ssoRegion:l,ssoRoleName:i,ssoClient:d,clientConfig:g,parentClientConfig:y,profile:f,logger:C})=>{let r;const c="To refresh this SSO session run aws sso login with the corresponding profile.";if(o)try{const u=await H({profile:f})();r={accessToken:u.token,expiresAt:new Date(u.expiration).toISOString()}}catch(u){throw new n.C1(u.message,{tryNextLink:T,logger:C})}else try{r=await(0,h.vf)(e)}catch{throw new n.C1(`The SSO session associated with this profile is invalid. ${c}`,{tryNextLink:T,logger:C})}if(new Date(r.expiresAt).getTime()-Date.now()<=0)throw new n.C1(`The SSO session associated with this profile has expired. ${c}`,{tryNextLink:T,logger:C});const{accessToken:O}=r,{SSOClient:x,GetRoleCredentialsCommand:S}=await Promise.all([t.e(539),t.e(700)]).then(t.bind(t,84700)),a=d||new x(Object.assign({},g??{},{logger:g?.logger??y?.logger,region:g?.region??l}));let m;try{m=await a.send(new S({accountId:s,roleName:i,accessToken:O}))}catch(u){throw new n.C1(u,{tryNextLink:T,logger:C})}const{roleCredentials:{accessKeyId:w,secretAccessKey:k,sessionToken:v,expiration:E,credentialScope:L,accountId:P}={}}=m;if(!w||!k||!v||!E)throw new n.C1("SSO returns an invalid temporary credential.",{tryNextLink:T,logger:C});const N={accessKeyId:w,secretAccessKey:k,sessionToken:v,expiration:new Date(E),...L&&{credentialScope:L},...P&&{accountId:P}};return o?(0,R.g)(N,"CREDENTIALS_SSO","s"):(0,R.g)(N,"CREDENTIALS_SSO_LEGACY","u"),N},Y=(e,o)=>{const{sso_start_url:s,sso_account_id:l,sso_region:i,sso_role_name:d}=e;if(!s||!l||!i||!d)throw new n.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:o});return e},B=(e={})=>async({callerClientConfig:o}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:s,ssoAccountId:l,ssoRegion:i,ssoRoleName:d,ssoSession:g}=e,{ssoClient:y}=e,f=(0,h.Bz)({profile:e.profile??o?.profile});if(!s&&!l&&!i&&!d&&!g){const r=(await(0,h.YU)(e))[f];if(!r)throw new n.C1(`Profile ${f} was not found.`,{logger:e.logger});if(!U(r))throw new n.C1(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(r?.sso_session){const w=(await(0,h.qw)(e))[r.sso_session],k=` configurations in profile ${f} and sso-session ${r.sso_session}`;if(i&&i!==w.sso_region)throw new n.C1("Conflicting SSO region"+k,{tryNextLink:!1,logger:e.logger});if(s&&s!==w.sso_start_url)throw new n.C1("Conflicting SSO start_url"+k,{tryNextLink:!1,logger:e.logger});r.sso_region=w.sso_region,r.sso_start_url=w.sso_start_url}const{sso_start_url:c,sso_account_id:O,sso_region:x,sso_role_name:S,sso_session:a}=Y(r,e.logger);return $({ssoStartUrl:c,ssoSession:a,ssoAccountId:O,ssoRegion:x,ssoRoleName:S,ssoClient:y,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f})}else{if(!s||!l||!i||!d)throw new n.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});return $({ssoStartUrl:s,ssoSession:g,ssoAccountId:l,ssoRegion:i,ssoRoleName:d,ssoClient:y,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f})}}}};
